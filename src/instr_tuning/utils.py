import re
from openai import OpenAI
import base64
from io import BytesIO
import json
from tqdm import tqdm
from concurrent.futures import ThreadPoolExecutor
import argparse
from PIL import Image
import os

from collections import Counter
from vllm import LLM, SamplingParams
from transformers import AutoTokenizer

import torch


QWQ_USER_PROMPT_REWARD = """\
I will show you a [Math Problem], a [Reference Solution], a [Student's Solution], and an [AI's Generated Error Location] generated by an AI assistant. Your task is to determine if the error location indicated in the [AI's Generated Error Location] correctly identify the error in the student's solution.

--------------------------------------------------

[Math Problem]

{problem}

[Reference Solution]

{reference}

[Student's Solution]

{student}

[AI's Generated Error Location]

{error_location}

--------------------------------------------------

Please evaluate whether the error location indicated in the [AI's Generated Error Location] is correct.

Note that in order to be accepted as correct, the student's solution must provide intermediate calculations that are correct and lead to the final answer.

Reply with only "Yes" or "No".
"""

QWQ_USER_PROMPT = """\
I will show you a [Math Problem], a [Reference Solution], and a [Student's Solution] (split into mathematical expressions).

--------------------------------------------------

[Math Problem]

{problem}

[Reference Solution]

{reference}

[Student's Solution]

{student}

--------------------------------------------------

Your task is to review and critique the [Student's Solution] expression by expression. Once you identify an error in a expression, return the expression where the earliest error occurs. Otherwise, return None.

Note that if the student does not provide correct intermediate calculations (at least 1 equation is neededed), the solution is incorrect even if the final answer is correct.

Please put your final answer as follows:
<correctness>{{correct or incorrect}}</correctness>
<localization>{{expression or None or lack of intermediate steps}}</localization>
"""

USER_PROMPT_DETAILED_AND_LOCALIZATION = """\
The following contains a math problem consisting of both a Question and a Student Answer. Your task is to analyze the Student Answer to determine whether there is any error. Begin by providing a detailed reasoning for your analysis, explaining where and why you believe an error is present or absent in the Student Answer. After the reasoning, provide a final output indicating whether the Student Answer is correct or incorrect. Please follow the exact format below without adding any extra information:
<think>
Detailed reasoning for your analysis, explaining where and why you believe an error is present or absent in the Student Answer.
</think>
<correctness>
Correct or Incorrect
</correctness>
<localization>
The localization of the error in the Student Answer. Write None if there is no error.
</localization>

Question: <image>
Reference Answer: {reference_answer}
Student Answer: <image>
"""

TRANSLATED_QUESTIONS_DIR = "/path/to/aihub/dataset/110.수학_과목_자동_풀이_데이터/3.개방데이터/1.데이터/Questions/train"
LABEL_DIR = "/path/to/aihub/dataset/110.수학_과목_자동_풀이_데이터/3.개방데이터/1.데이터/Labels"
STUDENTS_DIR = "/path/to/aihub/dataset/110.수학_과목_자동_풀이_데이터/3.개방데이터/1.데이터/Students"
STUDENT_ASNWER_DIR = STUDENTS_DIR

PATTERN = r"^<think>.*?</think>\s*<correctness>(.*?)</correctness>(?![\s\S])"
PATTERN_DETAILED_AND_LOCALIZATION = r"^<think>.*?</think>\s*<correctness>(.*?)</correctness>\s*<localization>(.*?)</localization>(?![\s\S])"

GRAMMAR = r"""
root    ::= correctness "</correctness>" localization
correctness ::= "correct" | "incorrect"
localization ::= "<localization>" expr "</localization>"
expr ::= "None" | "lack of intermediate steps" | math_expr
math_expr ::= ( [a-zA-Z0-9\\{}_^$().,;'"-=<>+|*/] )*
"""

def extract_answer(solution_text: str):
    boxed_pattern = r'\\boxed\{([^}]*)\}'
    matches = re.findall(boxed_pattern, solution_text)
    if matches:
        return matches[-1].strip()
    return None

def apply_chat_template(toker, messages):
    input_prompt = toker.apply_chat_template(messages, add_generation_prompt=True, tokenize=False)
    return toker(input_prompt, add_special_tokens=False).input_ids

def prepare_input_boxed(template, input_d):
    problem = input_d['problem']
    steps = input_d['steps']
    tagged_response = ''
    for sdx, step in enumerate(steps):
        tagged_response += f'<paragraph_{sdx}>\n{step}\n</paragraph_{sdx}>\n\n'
    tagged_response = tagged_response.strip()
    prompt = template.format(problem=problem, tagged_response=tagged_response)
    messages = [{'role': 'user', 'content': prompt}]
    return messages

def extract_correctness(response: str):
    """Extract correctness from the response using regex."""
    matches = re.search(PATTERN_DETAILED_AND_LOCALIZATION, response, re.DOTALL | re.MULTILINE)
    correctness = matches.group(1).strip().lower() if matches else ""
    return correctness